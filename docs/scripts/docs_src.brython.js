__BRYTHON__.use_VFS = true;
var scripts = {"$timestamp": 1652032583019, "docs_src.bootstrap": [".py", "from webcompy.app import WebComPyApp\nfrom .router import router\nfrom .layout import Root\n\n\napp=WebComPyApp(\nroot_component=Root,\nrouter=router,\n)\napp.set_head(\n{\n\"title\":\"WebComPy - Python Client-Side Web Framework\",\n\"meta\":[\n{\n\"charset\":\"utf-8\",\n},\n{\n\"name\":\"viewport\",\n\"content\":\"width=device-width, initial-scale=1.0\",\n},\n{\n\"name\":\"description\",\n\"content\":\"WebComPy is Python client-side web framework on Browser\",\n},\n{\n\"name\":\"keywords\",\n\"content\":\"python,framework,browser,front-end,client-side\",\n},\n],\n\"link\":[\n{\n\"rel\":\"stylesheet\",\n\"href\":\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css\",\n\"integrity\":\"sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC\",\n\"crossorigin\":\"anonymous\",\n},\n{\n\"rel\":\"stylesheet\",\n\"href\":\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/styles/default.min.css\",\n},\n],\n}\n)\napp.append_script(\n{\n\"type\":\"text/javascript\",\n\"src\":\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js\",\n\"integrity\":\"sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM\",\n\"crossorigin\":\"anonymous\",\n},\n)\napp.append_script(\n{\n\"type\":\"text/javascript\",\n\"src\":\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.5.1/highlight.min.js\",\n},\n)\n", ["docs_src.layout", "docs_src.router", "webcompy.app"]], "docs_src.layout": [".py", "from typing import List\nfrom webcompy.elements import html\nfrom webcompy.components import ComponentContext,define_component\nfrom webcompy.router import RouterView\nfrom .components.navigation import Navbar,Page\n\n\n@define_component\ndef Root(_:ComponentContext[None ]):\n pages:List[Page]=[\n {\n \"title\":\"Home\",\n \"to\":\"/\",\n },\n {\n \"title\":\"Documents\",\n \"to\":\"/documents\",\n \"children\":[],\n },\n {\n \"title\":\"Demos\",\n \n \"children\":[\n {\n \"title\":\"HelloWorld\",\n \"to\":\"/sample/helloworld\",\n },\n {\n \"title\":\"HelloWorld (ClassStyle)\",\n \"to\":\"/sample/helloworld-classstyle\",\n },\n {\n \"title\":\"FizzBuzz\",\n \"to\":\"/sample/fizzbuzz\",\n },\n {\n \"title\":\"ToDo List\",\n \"to\":\"/sample/todo\",\n },\n ],\n },\n ]\n return html.DIV(\n {},\n Navbar(pages),\n html.MAIN(\n {},\n html.ARTICLE(\n {},\n RouterView(),\n ),\n ),\n )\n", ["docs_src.components.navigation", "typing", "webcompy.components", "webcompy.elements", "webcompy.router"]], "docs_src.router": [".py", "from webcompy.router import Router\nfrom .pages.home import HomePage\nfrom .pages.document.home import DocumentHome\nfrom .pages.demo.helloworld import HelloWorldPage\nfrom .pages.demo.helloworld_classstyle import HelloWorldClassstylePage\nfrom .pages.demo.fizzbuzz import FizzbuzzPage\nfrom .pages.demo.todo import ToDoListPage\nfrom .pages.not_found import NotFound\n\nrouter=Router(\n{\"path\":\"/\",\"component\":HomePage},\n{\"path\":\"/documents\",\"component\":DocumentHome},\n{\"path\":\"/sample/helloworld\",\"component\":HelloWorldPage},\n{\"path\":\"/sample/helloworld-classstyle\",\"component\":HelloWorldClassstylePage},\n{\"path\":\"/sample/fizzbuzz\",\"component\":FizzbuzzPage},\n{\"path\":\"/sample/todo\",\"component\":ToDoListPage},\ndefault=NotFound,\nmode=\"history\",\nbase_url=\"/WebComPy\",\n)\n", ["docs_src.pages.demo.fizzbuzz", "docs_src.pages.demo.helloworld", "docs_src.pages.demo.helloworld_classstyle", "docs_src.pages.demo.todo", "docs_src.pages.document.home", "docs_src.pages.home", "docs_src.pages.not_found", "webcompy.router"]], "docs_src": [".py", "", [], 1], "docs_src.components.demo_display": [".py", "from typing import TypedDict\nfrom webcompy.elements import html\nfrom webcompy.components import define_component,ComponentContext\nfrom .syntax_highlighting import SyntaxHighlighting\n\n\nclass DemoComponentProps(TypedDict):\n title:str\n code:str\n \n \n@define_component\ndef DemoDisplay(context:ComponentContext[DemoComponentProps]):\n return html.DIV(\n {},\n html.DIV(\n {\"class\":\"card\"},\n html.DIV(\n {\"class\":\"card-body\"},\n html.H5({\"class\":\"card-title\"},context.props[\"title\"]),\n html.DIV(\n {\"class\":\"card\"},\n html.DIV(\n {\"class\":\"card-body\"},\n context.slots(\"component\"),\n ),\n ),\n html.BR(),\n html.DIV(\n {\"class\":\"card\"},\n html.DIV({\"class\":\"card-header\"},\"Code\"),\n html.DIV(\n {\"class\":\"card-body\"},\n SyntaxHighlighting(\n {\n \"lang\":\"python\",\n \"code\":context.props[\"code\"],\n }\n ),\n ),\n ),\n ),\n ),\n )\n", ["docs_src.components.syntax_highlighting", "typing", "webcompy.components", "webcompy.elements"]], "docs_src.components.navigation": [".py", "from typing import List,TypedDict\nfrom webcompy.elements import html\nfrom webcompy.components import define_component,ComponentContext\nfrom webcompy.router import RouterLink\n\n\nclass _SubPage(TypedDict):\n title:str\n to:str\n \n \nclass _PageRequired(TypedDict):\n title:str\n \n \nclass Page(_PageRequired,total=False ):\n to:str\n children:List[_SubPage]\n \n \n@define_component\ndef Navbar(context:ComponentContext[List[Page]]):\n def generate_navitem(page:Page,idx:int):\n  if \"children\"in page:\n   main=(\n   [\n   html.LI(\n   {},\n   RouterLink(\n   to=page[\"to\"],\n   text=[page[\"title\"]],\n   attrs={\"class\":\"dropdown-item\"},\n   ),\n   ),\n   html.LI(\n   {\"class\":\"dropdown-item\"},\n   html.HR({\"class\":\"dropdown-divider\"}),\n   ),\n   ]\n   if \"to\"in page\n   else []\n   )\n   items=tuple(\n   html.LI(\n   {},\n   RouterLink(\n   to=sub[\"to\"],\n   text=[sub[\"title\"]],\n   attrs={\"class\":\"dropdown-item\"},\n   ),\n   )\n   for sub in page[\"children\"]\n   )\n   return html.LI(\n   {\"class\":\"nav-item dropdown\"},\n   html.A(\n   {\n   \"id\":f\"navbar-dropdown-{idx}\",\n   \"class\":\"nav-link dropdown-toggle\",\n   \"data-bs-toggle\":\"dropdown\",\n   \"role\":\"button\",\n   \"data-bs-toggle\":\"dropdown\",\n   \"aria-expanded\":\"false\",\n   },\n   page[\"title\"],\n   ),\n   html.UL(\n   {\n   \"class\":\"dropdown-menu\",\n   \"aria-labelledby\":f\"navbar-dropdown-{idx}\",\n   },\n   *main,\n   *items,\n   ),\n   )\n  if \"to\"in page:\n   return html.LI(\n   {\"class\":\"nav-item\"},\n   RouterLink(\n   to=page[\"to\"],\n   text=[page[\"title\"]],\n   attrs={\"class\":\"nav-link\"},\n   ),\n   )\n  return None\n  \n return html.NAV(\n {\"class\":\"navbar navbar-expand-md navbar-light bg-light\"},\n html.DIV(\n {\"class\":\"container-fluid\"},\n html.SPAN(\n {\"class\":\"navbar-brand mb-0 h1\"},\n \"WebComPy\",\n ),\n html.BUTTON(\n {\n \"class\":\"navbar-toggler\",\n \"type\":\"button\",\n \"data-bs-toggle\":\"collapse\",\n \"data-bs-target\":\"#navbarNav\",\n \"aria-controls\":\"navbarNav\",\n \"aria-expanded\":\"false\",\n \"aria-label\":\"Toggle navigation\",\n },\n html.SPAN({\"class\":\"navbar-toggler-icon\"}),\n ),\n html.DIV(\n {\"class\":\"collapse navbar-collapse\",\"id\":\"navbarNav\"},\n html.UL(\n {\"class\":\"navbar-nav\"},\n *tuple(\n generate_navitem(page,idx)\n for idx,page in enumerate(context.props)\n ),\n ),\n ),\n ),\n )\n", ["typing", "webcompy.components", "webcompy.elements", "webcompy.router"]], "docs_src.components.syntax_highlighting": [".py", "from typing import TypedDict\nfrom webcompy.elements import html,DomNodeRef\nfrom webcompy.components import define_component,ComponentContext\nfrom webcompy.utils import strip_multiline_text\nfrom webcompy.brython import browser\n\n\nclass SyntaxHighlightingProps(TypedDict):\n code:str\n lang:str\n \n \n@define_component\ndef SyntaxHighlighting(context:ComponentContext[SyntaxHighlightingProps]):\n code_ref=DomNodeRef()\n \n @context.on_after_rendering\n def _():\n  if browser:\n   browser.window.hljs.highlightElement(code_ref.node)\n   \n return html.PRE(\n {},\n html.CODE(\n {\"class\":\"language-\"+context.props[\"lang\"],\":ref\":code_ref},\n strip_multiline_text(context.props[\"code\"]).strip(),\n ),\n )\n \n \nSyntaxHighlighting.scoped_style={\n\"pre code\":{\n\"font-size\":\"14px\",\n\"line-height\":\"1.2\",\n\"border-radius\":\"5px\",\n}\n}\n", ["typing", "webcompy.brython", "webcompy.components", "webcompy.elements", "webcompy.utils"]], "docs_src.components": [".py", "", [], 1], "docs_src.pages.home": [".py", "from webcompy.elements import html\nfrom webcompy.components import define_component,ComponentContext\nfrom webcompy.router import RouterContext\nfrom ..templates.home import Home\n\n\n@define_component\ndef HomePage(_:ComponentContext[RouterContext]):\n return html.DIV({},Home(None ))\n", ["docs_src.templates.home", "webcompy.components", "webcompy.elements", "webcompy.router"]], "docs_src.pages.not_found": [".py", "from webcompy.elements import html\nfrom webcompy.components import define_component,ComponentContext\nfrom webcompy.router import RouterContext\n\n\n@define_component\ndef NotFound(context:ComponentContext[RouterContext]):\n return html.DIV(\n {},\n html.H3(\n {},\n \"NotFound\",\n ),\n html.PRE(\n {},\n context.props.path,\n ),\n )\n", ["webcompy.components", "webcompy.elements", "webcompy.router"]], "docs_src.pages": [".py", "", [], 1], "docs_src.pages.demo.fizzbuzz": [".py", "from webcompy.elements import html\nfrom webcompy.components import define_component,ComponentContext\nfrom webcompy.router import RouterContext\nfrom ...templates.demo.fizzbuzz import Fizzbuzz\nfrom ...components.demo_display import DemoDisplay\n\n\n@define_component\ndef FizzbuzzPage(_:ComponentContext[RouterContext]):\n return html.DIV(\n {},\n DemoDisplay(\n {\n \"title\":\"FizzBuzz\",\n \"code\":\"\"\"\n                    from webcompy.reactive import Reactive, computed_property\n                    from webcompy.elements import html, repeat, switch\n                    from webcompy.components import (\n                        TypedComponentBase,\n                        component_class,\n                        on_before_rendering,\n                        component_template,\n                    )\n                    from webcompy.brython import DOMEvent\n\n\n                    @component_class\n                    class Fizzbuzz(TypedComponentBase(props_type=None)):\n                        def __init__(self) -> None:\n                            self.opened = Reactive(True)\n                            self.count = Reactive(10)\n\n                        @computed_property\n                        def fizzbuzz_list(self):\n                            li: list[str] = []\n                            for n in range(1, self.count.value + 1):\n                                if n % 15 == 0:\n                                    li.append(\"FizzBuzz\")\n                                elif n % 5 == 0:\n                                    li.append(\"Fizz\")\n                                elif n % 3 == 0:\n                                    li.append(\"Buzz\")\n                                else:\n                                    li.append(str(n))\n                            return li\n\n                        @computed_property\n                        def toggle_button_text(self):\n                            return \"Hide\" if self.opened.value else \"Open\"\n\n                        def add(self, ev: DOMEvent):\n                            self.count.value += 1\n\n                        def pop(self, ev: DOMEvent):\n                            if self.count.value > 0:\n                                self.count.value -= 1\n\n                        def toggle(self, ev: DOMEvent):\n                            self.opened.value = not self.opened.value\n\n                        @on_before_rendering\n                        def on_before_rendering(self):\n                            self.count.value = 10\n\n                        @component_template\n                        def template(self):\n                            return html.DIV(\n                                {},\n                                html.P(\n                                    {},\n                                    html.BUTTON(\n                                        {\"@click\": self.toggle},\n                                        self.toggle_button_text,\n                                    ),\n                                    html.BUTTON(\n                                        {\"@click\": self.add},\n                                        \"Add\",\n                                    ),\n                                    html.BUTTON(\n                                        {\"@click\": self.pop},\n                                        \"Pop\",\n                                    ),\n                                ),\n                                html.P(\n                                    {},\n                                    \"Count: \",\n                                    self.count,\n                                ),\n                                switch(\n                                    {\n                                        \"case\": self.opened,\n                                        \"generator\": lambda: html.DIV(\n                                            {},\n                                            html.UL(\n                                                {},\n                                                repeat(\n                                                    self.fizzbuzz_list,\n                                                    lambda s: html.LI({}, s),\n                                                ),\n                                            ),\n                                        ),\n                                    },\n                                    default=lambda: html.DIV(\n                                        {},\n                                        \"FizzBuzz Hidden\",\n                                    ),\n                                ),\n                            )\n\n\n                    Fizzbuzz.scoped_style = {\n                        \"ul\": {\n                            \"border\": \"dashed 2px #668ad8\",\n                            \"background\": \"#f1f8ff\",\n                            \"padding\": \"0.5em 0.5em 0.5em 2em\",\n                        },\n                        \"ul > li:nth-child(3n)\": {\n                            \"color\": \"red\",\n                        },\n                        \"ul > li:nth-child(5n)\": {\n                            \"color\": \"blue\",\n                        },\n                        \"ul > li:nth-child(15n)\": {\n                            \"color\": \"purple\",\n                        },\n                        \"button\": {\n                            \"display\": \"inline-block\",\n                            \"text-decoration\": \"none\",\n                            \"border\": \"solid 2px #668ad8\",\n                            \"border-radius\": \"3px\",\n                            \"transition\": \"0.2s\",\n                            \"color\": \"black\",\n                        },\n                        \"button:hover\": {\n                            \"background\": \"#668ad8\",\n                            \"color\": \"white\",\n                        },\n                    }\"\"\",\n },\n slots={\"component\":lambda :Fizzbuzz(None )},\n ),\n )\n", ["docs_src.components.demo_display", "docs_src.templates.demo.fizzbuzz", "webcompy.components", "webcompy.elements", "webcompy.router"]], "docs_src.pages.demo.helloworld": [".py", "from webcompy.elements import html\nfrom webcompy.components import define_component,ComponentContext\nfrom webcompy.router import RouterContext\nfrom ...components.demo_display import DemoDisplay\nfrom ...templates.demo.helloworld import HelloWorld\n\n\n@define_component\ndef HelloWorldPage(_:ComponentContext[RouterContext]):\n return html.DIV(\n {},\n DemoDisplay(\n {\n \"title\":\"HelloWorld\",\n \"code\":\"\"\"\n                    from webcompy.elements import html\n                    from webcompy.components import define_component, ComponentContext\n\n\n                    @define_component\n                    def HelloWorld(_: ComponentContext[None]):\n                        return html.DIV(\n                            {},\n                            html.H1(\n                                {},\n                                \"Hello WebComPy!\",\n                            ),\n                        )\"\"\",\n },\n slots={\"component\":lambda :HelloWorld(None )},\n ),\n )\n", ["docs_src.components.demo_display", "docs_src.templates.demo.helloworld", "webcompy.components", "webcompy.elements", "webcompy.router"]], "docs_src.pages.demo.helloworld_classstyle": [".py", "from webcompy.elements import html\nfrom webcompy.components import define_component,ComponentContext\nfrom webcompy.router import RouterContext\nfrom ...components.demo_display import DemoDisplay\nfrom ...templates.demo.helloworld_classstyle import HelloWorldClassstyle\n\n\n@define_component\ndef HelloWorldClassstylePage(_:ComponentContext[RouterContext]):\n return html.DIV(\n {},\n DemoDisplay(\n {\n \"title\":\"HelloWorld (ClassStyle)\",\n \"code\":\"\"\"\n                    from webcompy.elements import html\n                    from webcompy.components import (\n                        TypedComponentBase,\n                        component_class,\n                        component_template,\n                    )\n\n\n                    @component_class\n                    class HelloWorldClassstyle(TypedComponentBase(props_type=None)):\n                        @component_template\n                        def template(self):\n                            return html.DIV(\n                                {},\n                                html.H1(\n                                    {},\n                                    \"Hello WebComPy!\",\n                                ),\n                            )\"\"\",\n },\n slots={\"component\":lambda :HelloWorldClassstyle(None )},\n ),\n )\n", ["docs_src.components.demo_display", "docs_src.templates.demo.helloworld_classstyle", "webcompy.components", "webcompy.elements", "webcompy.router"]], "docs_src.pages.demo.todo": [".py", "from webcompy.elements import html\nfrom webcompy.components import define_component,ComponentContext\nfrom webcompy.router import RouterContext\nfrom ...components.demo_display import DemoDisplay\nfrom ...templates.demo.todo import ToDoList\n\n\n@define_component\ndef ToDoListPage(_:ComponentContext[RouterContext]):\n return html.DIV(\n {},\n DemoDisplay(\n {\n \"title\":\"ToDo List\",\n \"code\":\"\"\"\n                    from typing import Any, TypedDict\n                    from webcompy.elements import html, repeat, DomNodeRef\n                    from webcompy.components import define_component, ComponentContext\n                    from webcompy.reactive import Reactive, ReactiveList, computed\n\n\n                    class TodoData(TypedDict):\n                        title: Reactive[str]\n                        done: Reactive[bool]\n\n\n                    @define_component\n                    def ToDoItem(context: ComponentContext[TodoData]):\n                        input_ref = DomNodeRef()\n\n                        def on_change_state(_: Any):\n                            context.props[\"done\"].value = input_ref.node.checked\n\n                        return html.LI(\n                            {},\n                            html.LABEL(\n                                {},\n                                html.INPUT(\n                                    {\n                                        \"type\": \"checkbox\",\n                                        \"@change\": on_change_state,\n                                        \":ref\": input_ref,\n                                    },\n                                ),\n                            ),\n                            \" \",\n                            html.SPAN(\n                                {\n                                    \"style\": computed(\n                                        lambda: \"text-decoration: line-through;\"\n                                        if context.props[\"done\"].value\n                                        else \"\"\n                                    )\n                                },\n                                context.props[\"title\"],\n                            ),\n                        )\n\n\n                    ToDoItem.scoped_style = {\n                        \"li\": {\n                            \"color\": \"#2d8fdd\",\n                            \"border-left\": \" solid 6px #2d8fdd\",\n                            \"background\": \"#f1f8ff\",\n                            \"line-height\": \"1.5\",\n                            \"margin\": \"5px\",\n                            \"padding\": \"5px\",\n                            \"vertical-align\": \"middle\",\n                            \"list-style-type\": \"none\",\n                        }\n                    }\n\n\n                    @define_component\n                    def ToDoList(_: ComponentContext[None]):\n                        input_ref = DomNodeRef()\n                        data: ReactiveList[TodoData] = ReactiveList(\n                            [\n                                {\n                                    \"title\": Reactive(\"Try WebComPy\"),\n                                    \"done\": Reactive(False),\n                                },\n                                {\n                                    \"title\": Reactive(\"Create WebComPy project\"),\n                                    \"done\": Reactive(False),\n                                }\n                            ]\n                        )\n\n                        def append_item(_: Any):\n                            title = input_ref.node.value\n                            if title:\n                                data.append(\n                                    {\n                                        \"title\": Reactive(title),\n                                        \"done\": Reactive(False),\n                                    }\n                                )\n\n                        def remove_done_items(_: Any):\n                            items_remove = reversed(\n                                [idx for idx, item in enumerate(data.value) if item[\"done\"].value]\n                            )\n                            for idx in items_remove:\n                                data.pop(idx)\n\n                        return html.DIV(\n                            {},\n                            html.P(\n                                {},\n                                \"Title: \",\n                                html.INPUT({\":ref\": input_ref}),\n                                html.BUTTON({\"@click\": append_item}, \"Add ToDo\"),\n                                html.BUTTON({\"@click\": remove_done_items}, \"Remove Done Items\"),\n                            ),\n                            html.UL(\n                                {},\n                                repeat(\n                                    sequence=data,\n                                    template=ToDoItem,\n                                ),\n                            ),\n                        )\n\n\n                    ToDoList.scoped_style = {\n                        \"button\": {\n                            \"display\": \"inline-block\",\n                            \"text-decoration\": \"none\",\n                            \"border\": \"solid 2px #668ad8\",\n                            \"border-radius\": \"3px\",\n                            \"transition\": \"0.2s\",\n                            \"color\": \"black\",\n                        },\n                        \"button:hover\": {\n                            \"background\": \"#668ad8\",\n                            \"color\": \"white\",\n                        },\n                    }\"\"\",\n },\n slots={\"component\":lambda :ToDoList(None )},\n ),\n )\n", ["docs_src.components.demo_display", "docs_src.templates.demo.todo", "webcompy.components", "webcompy.elements", "webcompy.router"]], "docs_src.pages.demo": [".py", "", [], 1], "docs_src.pages.document.home": [".py", "from webcompy.elements import html\nfrom webcompy.components import define_component,ComponentContext\nfrom webcompy.router import RouterContext\nfrom ...templates.document.home import DocumentHome\n\n\n@define_component\ndef DocumentHomePage(_:ComponentContext[RouterContext]):\n return html.DIV({},DocumentHome(None ))\n", ["docs_src.templates.document.home", "webcompy.components", "webcompy.elements", "webcompy.router"]], "docs_src.pages.document": [".py", "", [], 1], "docs_src.templates.home": [".py", "from webcompy.elements import html\nfrom webcompy.components import define_component,ComponentContext\nfrom ..components.syntax_highlighting import SyntaxHighlighting\n\n\n@define_component\ndef Home(_:ComponentContext[None ]):\n return html.DIV(\n {\"class\":\"container\"},\n html.SECTION(\n {\"class\":\"content\"},\n html.H2(\n {\"class\":\"heading\"},\n \"What is WebComPy\",\n ),\n html.DIV(\n {\"class\":\"body\"},\n \"WebComPy is Python client-side web framework on Browser which has following features.\",\n html.UL(\n {},\n html.LI({},\"Component-based declarative rendering\"),\n html.LI({},\"Automatic DOM refreshing\"),\n html.LI({},\"Built-in router\"),\n html.LI({},\"Built-in server / Static Site Generation\"),\n ),\n ),\n ),\n html.SECTION(\n {\"class\":\"content\"},\n html.H2(\n {\"class\":\"heading\"},\n \"Get started\",\n ),\n html.DIV(\n {\"class\":\"body\"},\n \"Run following commands to initilize a new project.\",\n SyntaxHighlighting(\n {\n \"lang\":\"bash\",\n \"code\":\"\"\"\n                            mkdir webcompy-project\n                            cd webcompy-project\n                            pip install webcompy\n                            python -m webcompy init\n                            python -m webcompy start --dev\n                        \"\"\"\n }\n ),\n ),\n ),\n )\n \n \nHome.scoped_style={\n\".container\":{\n\"margin\":\"2px auto\",\n\"padding\":\"5px 5px\",\n},\n\".container .content\":{\n\"margin\":\"10px auto\",\n\"padding\":\"10px\",\n\"background-color\":\"#fafafa\",\n\"border-radius\":\"15px\",\n},\n\".container .content .body\":{\n\"margin\":\"10px auto\",\n},\n\".container .content .heading\":{\n\"padding\":\"5px\",\n\"border-bottom\":\"double 3px black\",\n\"font-size\":\"20px\",\n},\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", ["docs_src.components.syntax_highlighting", "webcompy.components", "webcompy.elements"]], "docs_src.templates": [".py", "", [], 1], "docs_src.templates.demo.fizzbuzz": [".py", "from webcompy.reactive import Reactive,computed_property\nfrom webcompy.elements import html,repeat,switch\nfrom webcompy.components import (\nTypedComponentBase,\ncomponent_class,\non_before_rendering,\ncomponent_template,\n)\nfrom webcompy.brython import DOMEvent\n\n\n@component_class\nclass Fizzbuzz(TypedComponentBase(props_type=None )):\n def __init__(self)->None :\n  self.opened=Reactive(True )\n  self.count=Reactive(10)\n  \n @computed_property\n def fizzbuzz_list(self):\n  li:list[str]=[]\n  for n in range(1,self.count.value+1):\n   if n %15 ==0:\n    li.append(\"FizzBuzz\")\n   elif n %5 ==0:\n    li.append(\"Fizz\")\n   elif n %3 ==0:\n    li.append(\"Buzz\")\n   else :\n    li.append(str(n))\n  return li\n  \n @computed_property\n def toggle_button_text(self):\n  return \"Hide\"if self.opened.value else \"Open\"\n  \n def add(self,ev:DOMEvent):\n  self.count.value +=1\n  \n def pop(self,ev:DOMEvent):\n  if self.count.value >0:\n   self.count.value -=1\n   \n def toggle(self,ev:DOMEvent):\n  self.opened.value=not self.opened.value\n  \n @on_before_rendering\n def on_before_rendering(self):\n  self.count.value=10\n  \n @component_template\n def template(self):\n  return html.DIV(\n  {},\n  html.P(\n  {},\n  html.BUTTON(\n  {\"@click\":self.toggle},\n  self.toggle_button_text,\n  ),\n  html.BUTTON(\n  {\"@click\":self.add},\n  \"Add\",\n  ),\n  html.BUTTON(\n  {\"@click\":self.pop},\n  \"Pop\",\n  ),\n  ),\n  html.P(\n  {},\n  \"Count: \",\n  self.count,\n  ),\n  switch(\n  {\n  \"case\":self.opened,\n  \"generator\":lambda :html.DIV(\n  {},\n  html.UL(\n  {},\n  repeat(\n  self.fizzbuzz_list,\n  lambda s:html.LI({},s),\n  ),\n  ),\n  ),\n  },\n  default=lambda :html.DIV(\n  {},\n  \"FizzBuzz Hidden\",\n  ),\n  ),\n  )\n  \n  \nFizzbuzz.scoped_style={\n\"ul\":{\n\"border\":\"dashed 2px #668ad8\",\n\"background\":\"#f1f8ff\",\n\"padding\":\"0.5em 0.5em 0.5em 2em\",\n},\n\"ul > li:nth-child(3n)\":{\n\"color\":\"red\",\n},\n\"ul > li:nth-child(5n)\":{\n\"color\":\"blue\",\n},\n\"ul > li:nth-child(15n)\":{\n\"color\":\"purple\",\n},\n\"button\":{\n\"display\":\"inline-block\",\n\"text-decoration\":\"none\",\n\"border\":\"solid 2px #668ad8\",\n\"border-radius\":\"3px\",\n\"transition\":\"0.2s\",\n\"color\":\"black\",\n},\n\"button:hover\":{\n\"background\":\"#668ad8\",\n\"color\":\"white\",\n},\n}\n", ["webcompy.brython", "webcompy.components", "webcompy.elements", "webcompy.reactive"]], "docs_src.templates.demo.helloworld": [".py", "from webcompy.elements import html\nfrom webcompy.components import define_component,ComponentContext\n\n\n@define_component\ndef HelloWorld(_:ComponentContext[None ]):\n return html.DIV(\n {},\n html.H1(\n {},\n \"Hello WebComPy!\",\n ),\n )\n", ["webcompy.components", "webcompy.elements"]], "docs_src.templates.demo.helloworld_classstyle": [".py", "from webcompy.elements import html\nfrom webcompy.components import (\nTypedComponentBase,\ncomponent_class,\ncomponent_template,\n)\n\n\n@component_class\nclass HelloWorldClassstyle(TypedComponentBase(props_type=None )):\n @component_template\n def template(self):\n  return html.DIV(\n  {},\n  html.H1(\n  {},\n  \"Hello WebComPy!\",\n  ),\n  )\n", ["webcompy.components", "webcompy.elements"]], "docs_src.templates.demo.todo": [".py", "from typing import Any,TypedDict\nfrom webcompy.elements import html,repeat,DomNodeRef\nfrom webcompy.components import define_component,ComponentContext\nfrom webcompy.reactive import Reactive,ReactiveList,computed\n\n\nclass TodoData(TypedDict):\n title:Reactive[str]\n done:Reactive[bool]\n \n \n@define_component\ndef ToDoItem(context:ComponentContext[TodoData]):\n input_ref=DomNodeRef()\n \n def on_change_state(_:Any):\n  context.props[\"done\"].value=input_ref.node.checked\n  \n return html.LI(\n {},\n html.LABEL(\n {},\n html.INPUT(\n {\n \"type\":\"checkbox\",\n \"@change\":on_change_state,\n \":ref\":input_ref,\n },\n ),\n ),\n \" \",\n html.SPAN(\n {\n \"style\":computed(\n lambda :\"text-decoration: line-through;\"\n if context.props[\"done\"].value\n else \"\"\n )\n },\n context.props[\"title\"],\n ),\n )\n \n \nToDoItem.scoped_style={\n\"li\":{\n\"color\":\"#2d8fdd\",\n\"border-left\":\" solid 6px #2d8fdd\",\n\"background\":\"#f1f8ff\",\n\"line-height\":\"1.5\",\n\"margin\":\"5px\",\n\"padding\":\"5px\",\n\"vertical-align\":\"middle\",\n\"list-style-type\":\"none\",\n}\n}\n\n\n@define_component\ndef ToDoList(_:ComponentContext[None ]):\n input_ref=DomNodeRef()\n data:ReactiveList[TodoData]=ReactiveList(\n [\n {\n \"title\":Reactive(\"Try WebComPy\"),\n \"done\":Reactive(False ),\n },\n {\n \"title\":Reactive(\"Create WebComPy project\"),\n \"done\":Reactive(False ),\n }\n ]\n )\n \n def append_item(_:Any):\n  title=input_ref.node.value\n  if title:\n   data.append(\n   {\n   \"title\":Reactive(title),\n   \"done\":Reactive(False ),\n   }\n   )\n   \n def remove_done_items(_:Any):\n  items_remove=reversed(\n  [idx for idx,item in enumerate(data.value)if item[\"done\"].value]\n  )\n  for idx in items_remove:\n   data.pop(idx)\n   \n return html.DIV(\n {},\n html.P(\n {},\n \"Title: \",\n html.INPUT({\":ref\":input_ref}),\n html.BUTTON({\"@click\":append_item},\"Add ToDo\"),\n html.BUTTON({\"@click\":remove_done_items},\"Remove Done Items\"),\n ),\n html.UL(\n {},\n repeat(\n sequence=data,\n template=ToDoItem,\n ),\n ),\n )\n \n \nToDoList.scoped_style={\n\"button\":{\n\"display\":\"inline-block\",\n\"text-decoration\":\"none\",\n\"border\":\"solid 2px #668ad8\",\n\"border-radius\":\"3px\",\n\"transition\":\"0.2s\",\n\"color\":\"black\",\n},\n\"button:hover\":{\n\"background\":\"#668ad8\",\n\"color\":\"white\",\n},\n}\n", ["typing", "webcompy.components", "webcompy.elements", "webcompy.reactive"]], "docs_src.templates.demo": [".py", "", [], 1], "docs_src.templates.document.home": [".py", "from webcompy.elements import html\nfrom webcompy.components import define_component,ComponentContext\nfrom webcompy.router import RouterContext\n\n\n@define_component\ndef DocumentHome(_:ComponentContext[RouterContext]):\n return html.DIV({},\"Work In Progress...\")\n", ["webcompy.components", "webcompy.elements", "webcompy.router"]], "docs_src.templates.document": [".py", "", [], 1]}
__BRYTHON__.update_VFS(scripts)
